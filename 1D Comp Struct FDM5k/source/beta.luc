module beta (
    input start_button,
    input reset_button, 
    input p1_button1,
    input p1_button2,
    input p1_button3,
    input p1_button4,
    
    input p2_button1,
    input p2_button2,
    input p2_button3,
    input p2_button4,
    
    input clk,  // clock
    input rst,  // reset
    input rng16[16],
    input dec,

    output main_timer_segs[8],
    output main_timer_sel[4],
    output mini_timer_5_segs[8],
    
    output scorep1_segs[8],
    output scorep1_sel[4],
    output scorep2_segs[8],
    output scorep2_sel[4],

    output p1_led1[16],
    output p1_led2[16],
    output p1_led3[16],
    output p1_led4[16],
    output p2_led1[16],
    output p2_led2[16],
    output p2_led3[16],
    output p2_led4[16]

  ) {

  alu16 game_alu;
  look_up_table lookup; 

  .clk(clk){

    .rst(rst){
      fsm_auto game_controlunit;
      reg_files players;

    }
  }

  always {
  
    game_alu.a = 0; 
    game_alu.b = 0; 

    //pass button press signal to FSM 
    game_controlunit.data = players.data_out; //This comes from REGFILE 
    
    //These are passing the inputs from au_top to FSM 
    game_controlunit.start_button = start_button; 
    game_controlunit.reset_button = reset_button; 
    game_controlunit.p1_button1 = p1_button1;
    game_controlunit.p1_button2 = p1_button2;
    game_controlunit.p1_button3 = p1_button3;
    game_controlunit.p1_button4 = p1_button4;
    
    game_controlunit.p2_button1 = p2_button1;
    game_controlunit.p2_button2 = p2_button2;
    game_controlunit.p2_button3 = p2_button3;
    game_controlunit.p2_button4 = p2_button4;    
    
    //pass timer signal to FSM
    game_controlunit.dec = dec;
    
    //Generate the LED sequence by getting 4 bits for each column from the randomly generated 16 bit number. 
    lookup.randgen = rng16;


    //Setup REGFILE unit
    players.we = game_controlunit.we;
    players.write_address = game_controlunit.wa;

    players.read_address_a = game_controlunit.ra;
    players.read_address_b = game_controlunit.rb;

    
    //asel mux
    case(game_controlunit.asel){
      b00  : game_alu.a = players.out_a;
      b01  : game_alu.a = 4b1111;
      b10  : game_alu.a = 4b1001;
      b11  : game_alu.a = lookup.led_Out;
      default : //b10 unused
          game_alu.a = 0;
    }

    //bsel mux
    case(game_controlunit.bsel){
      b00 : game_alu.b = players.out_b;
      b01 : game_alu.b = 4b0000;
      b11 : game_alu.b = 4b0001;
      b10 : game_alu.b = 4b0110;
      default: //necessary to init
          game_alu.b = 0;

    }

    game_alu.alufn = game_controlunit.alufn;


    //wdsel mux
    case (game_controlunit.wdsel){
      default : players.data = game_alu.out; //b00
          
    }

    main_timer_segs = game_controlunit.main_timer_segs;
    main_timer_sel = game_controlunit.main_timer_sel;
    mini_timer_5_segs = game_controlunit.mini_timer_5_segs;
    
    scorep1_segs = game_controlunit.scorep1_segs;
    scorep1_sel = game_controlunit.scorep1_sel;
    scorep2_segs = game_controlunit.scorep2_segs;
    scorep2_sel = game_controlunit.scorep2_sel;
    
    p1_led1 = game_controlunit.p1_led1;
    p1_led2 = game_controlunit.p1_led2;
    p1_led3 = game_controlunit.p1_led3;
    p1_led4 = game_controlunit.p1_led4;
    p2_led1 = game_controlunit.p2_led1;
    p2_led2 = game_controlunit.p2_led2;
    p2_led3 = game_controlunit.p2_led3;
    p2_led4 = game_controlunit.p2_led4;
  }
}
