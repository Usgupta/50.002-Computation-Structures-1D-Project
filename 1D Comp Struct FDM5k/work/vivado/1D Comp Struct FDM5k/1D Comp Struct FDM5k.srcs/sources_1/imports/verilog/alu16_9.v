/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu16_9 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [1-1:0] M_adder16_z;
  wire [1-1:0] M_adder16_v;
  wire [1-1:0] M_adder16_n;
  wire [16-1:0] M_adder16_out;
  reg [6-1:0] M_adder16_alufn;
  reg [16-1:0] M_adder16_a;
  reg [16-1:0] M_adder16_b;
  adder_13 adder16 (
    .alufn(M_adder16_alufn),
    .a(M_adder16_a),
    .b(M_adder16_b),
    .z(M_adder16_z),
    .v(M_adder16_v),
    .n(M_adder16_n),
    .out(M_adder16_out)
  );
  
  wire [16-1:0] M_bool_out;
  reg [16-1:0] M_bool_a;
  reg [16-1:0] M_bool_b;
  reg [6-1:0] M_bool_alufnb;
  boolean_14 bool (
    .a(M_bool_a),
    .b(M_bool_b),
    .alufnb(M_bool_alufnb),
    .out(M_bool_out)
  );
  
  wire [16-1:0] M_shifter_out;
  reg [16-1:0] M_shifter_a;
  reg [16-1:0] M_shifter_b;
  reg [6-1:0] M_shifter_alufn;
  shift_15 shifter (
    .a(M_shifter_a),
    .b(M_shifter_b),
    .alufn(M_shifter_alufn),
    .out(M_shifter_out)
  );
  
  wire [16-1:0] M_comparer_out;
  reg [1-1:0] M_comparer_z;
  reg [1-1:0] M_comparer_v;
  reg [1-1:0] M_comparer_n;
  reg [6-1:0] M_comparer_alufnc;
  compare_16 comparer (
    .z(M_comparer_z),
    .v(M_comparer_v),
    .n(M_comparer_n),
    .alufnc(M_comparer_alufnc),
    .out(M_comparer_out)
  );
  
  wire [16-1:0] M_mul_out;
  reg [16-1:0] M_mul_a;
  reg [16-1:0] M_mul_b;
  reg [6-1:0] M_mul_alufn;
  multiplier_17 mul (
    .a(M_mul_a),
    .b(M_mul_b),
    .alufn(M_mul_alufn),
    .out(M_mul_out)
  );
  
  always @* begin
    out = 1'h0;
    M_adder16_a = a;
    M_adder16_b = b;
    z = 1'h0;
    v = 1'h0;
    n = 1'h0;
    if (alufn[4+1-:2] == 2'h3) begin
      M_adder16_alufn = 6'h01;
    end else begin
      M_adder16_alufn = alufn;
    end
    M_mul_a = a;
    M_mul_b = b;
    M_mul_alufn = alufn;
    M_bool_a = a;
    M_bool_b = b;
    M_bool_alufnb = alufn;
    M_shifter_alufn = alufn;
    M_shifter_a = a;
    M_shifter_b = b;
    M_comparer_z = M_adder16_z;
    M_comparer_v = M_adder16_v;
    M_comparer_n = M_adder16_n;
    M_comparer_alufnc = alufn;
    
    case (alufn[4+1-:2])
      2'h0: begin
        if (alufn[0+1-:2] == 2'h2) begin
          out = M_mul_out;
        end else begin
          z = M_adder16_z;
          v = M_adder16_v;
          n = M_adder16_n;
          out = M_adder16_out;
        end
      end
      2'h1: begin
        out = M_bool_out;
      end
      2'h2: begin
        out = M_shifter_out;
      end
      2'h3: begin
        out = M_comparer_out;
      end
    endcase
  end
endmodule
