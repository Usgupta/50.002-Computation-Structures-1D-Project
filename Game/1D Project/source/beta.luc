/*

module beta (
    input p1_button,
    input p2_button,
    
    input clk,  // clock
    input rst  // reset
    
    

  ) {
  
  //temp variables
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  
  alu16 game_alu;

  .clk(clk){
    edge_detector edge_detector_variableCounter (#RISE(1), #FALL(0));
    edge_detector game_timer_detector(#RISE(1), #FALL(0));
    
    .rst(rst){
      fsm_automatic game_controlunit;
      
      reg_files players;
      
      variable_counter vc;
      counter slow_timer(#SIZE(1),#DIV(25)); 

    }
  }
  
 
  
  always {
    
    //edge detectors
      game_timer_detector.in = slow_timer.value; // 30 second timer detector
      edge_detector_variableCounter.in = vc.out; // random counter increase signal 
      
      //pass timer and counter signals to CU unit 
      game_controlunit.increase_counter = edge_detector_variableCounter.out;
      game_controlunit.decrease_timer = game_timer_detector.out;
      
      //pass button press signal to CU unit
      game_controlunit.p1_button = p1_button;
      game_controlunit.p2_button = p2_button;
      

      
      //Setup REGFILE unit 
      players.we = game_controlunit.we_regfile;
      players.write_address = game_controlunit.regfile_write_address;
     
    players.read_address_a = game_controlunit.regfile_read_address_a;
    players.read_address_b = game_controlunit.regfile_read_address_b;
    
    //bootstrap reg_b output to CU for convenient branching conditions
    game_controlunit.regfile_datain = players.out_b;
    
    //asel mux
    case(game_controlunit.asel){
      b00  : inputAlu_a = players.out_a;
      b01  : inputAlu_a = h5; 
      b10  : inputAlu_a = h3C;
      default : //b10 unused
          inputAlu_a = 0;
    }
    
    //bsel mux
    case(game_controlunit.bsel){
      b00 : inputAlu_b = players.out_b;
      b01 : inputAlu_b = h0;
      b11 : inputAlu_b = h1;
      b10 : inputAlu_b = h2;
      default: //necessary to init
          inputAlu_b = 0;
      
    }
    
    //ALU
    game_alu.a = inputAlu_a;
    game_alu.b = inputAlu_b;
    game_alu.alufn = game_controlunit.alufn;
   
    
    //wdsel mux
    case (game_controlunit.alu_out_sel){
      default : //b00
          players.data = game_alu.out;
    }
    
    //for debugging
  //  debug_out[3:0] = players.all_buttons;
  //  debug_out[7:4] = players.out;    
  //  debug_out = game_controlunit.debug;
    
   
 
  }
}

*/