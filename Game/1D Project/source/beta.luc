
module beta (
    input start_button,
    //input p1_button1,
    //input p1_button2,
    //input p1_button3,
    //input p1_button4,
    input clk,  // clock
    input rst,  // reset
    input rng16,
    input dec,

    output main_timer_segs[8],
    output main_timer_sel[4],
    output mini_timer_5_segs[8],

    output p1_led1[16],
    output p1_led2[16],
    output p1_led3[16],
    output p1_led4[16],
    output p2_led1[16],
    output p2_led2[16],
    output p2_led3[16],
    output p2_led4[16]

  ) {

  //temp variables
  sig inputAlu_a[16];
  sig inputAlu_b[16];

  alu16 game_alu;

  .clk(clk){
    edge_detector edge_detector_variableCounter (#RISE(1), #FALL(0));
    edge_detector game_timer_detector(#RISE(1), #FALL(0));

    .rst(rst){
      fsm_auto game_controlunit;

      reg_files players;

      variable_counter vc;
      counter slow_timer(#SIZE(1),#DIV(25));

    }
  }



  always {

    //edge detectors
      game_timer_detector.in = slow_timer.value; // 30 second timer detector
      edge_detector_variableCounter.in = vc.out; // random counter increase signal

      //pass timer and counter signals to CU unit


      //pass button press signal to CU unit
      game_controlunit.start_button = start_button;
      //game_controlunit.p1_button1 = p1_button1;
      //game_controlunit.p1_button2 = p1_button2;
      //game_controlunit.p1_button3 = p1_button3;
     //game_controlunit.p1_button4 = p1_button4;
      game_controlunit.rng16 = rng16;
      game_controlunit.dec = dec;


      //Setup REGFILE unit
      players.we = game_controlunit.we_regfile;
      players.write_address = game_controlunit.regfile_wa;

    players.read_address_a = game_controlunit.regfile_ra;
    players.read_address_b = game_controlunit.regfile_rb;

    //bootstrap reg_b output to CU for convenient branching conditions
    //game_controlunit.regfile_datain = players.out_b;

    //asel mux
    case(game_controlunit.asel){
      b00  : inputAlu_a = players.out_a;
      b01  : inputAlu_a = h5;
      b10  : inputAlu_a = h3C;
      default : //b10 unused
          inputAlu_a = 0;
    }

    //bsel mux
    case(game_controlunit.bsel){
      b00 : inputAlu_b = players.out_b;
      b01 : inputAlu_b = h0;
      b11 : inputAlu_b = h1;
      b10 : inputAlu_b = h2;
      default: //necessary to init
          inputAlu_b = 0;

    }

    //ALU
    game_alu.a = inputAlu_a;
    game_alu.b = inputAlu_b;
    game_alu.alufn = game_controlunit.alufn;


    //wdsel mux
    case (game_controlunit.wdsel){
      default : //b00
          players.data = game_alu.out;
    }

    //for debugging
  //  debug_out[3:0] = players.all_buttons;
  //  debug_out[7:4] = players.out;
  //  debug_out = game_controlunit.debug;

    main_timer_segs = game_controlunit.main_timer_segs;
    main_timer_sel = game_controlunit.main_timer_sel;
    mini_timer_5_segs = game_controlunit.mini_timer_segs;
    p1_led1 = game_controlunit.p1_led1;
    p1_led2 = game_controlunit.p1_led2;
    p1_led3 = game_controlunit.p1_led3;
    p1_led4 = game_controlunit.p1_led4;
    p2_led1 = game_controlunit.p2_led1;
    p2_led2 = game_controlunit.p2_led2;
    p2_led3 = game_controlunit.p2_led3;
    p2_led4 = game_controlunit.p2_led4;
  }
}
