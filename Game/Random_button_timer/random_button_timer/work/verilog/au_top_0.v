/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [3:0] io_sel,
    output reg [7:0] io_seg,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_detector_slow_timer_out;
  reg [1-1:0] M_edge_detector_slow_timer_in;
  edge_detector_2 edge_detector_slow_timer (
    .clk(clk),
    .in(M_edge_detector_slow_timer_in),
    .out(M_edge_detector_slow_timer_out)
  );
  wire [1-1:0] M_btn_cond1_out;
  reg [1-1:0] M_btn_cond1_in;
  button_conditioner_3 btn_cond1 (
    .clk(clk),
    .in(M_btn_cond1_in),
    .out(M_btn_cond1_out)
  );
  wire [1-1:0] M_btn_cond2_out;
  reg [1-1:0] M_btn_cond2_in;
  button_conditioner_3 btn_cond2 (
    .clk(clk),
    .in(M_btn_cond2_in),
    .out(M_btn_cond2_out)
  );
  wire [1-1:0] M_btn_cond3_out;
  reg [1-1:0] M_btn_cond3_in;
  button_conditioner_3 btn_cond3 (
    .clk(clk),
    .in(M_btn_cond3_in),
    .out(M_btn_cond3_out)
  );
  wire [1-1:0] M_btn_cond4_out;
  reg [1-1:0] M_btn_cond4_in;
  button_conditioner_3 btn_cond4 (
    .clk(clk),
    .in(M_btn_cond4_in),
    .out(M_btn_cond4_out)
  );
  wire [1-1:0] M_edge_btn1_out;
  reg [1-1:0] M_edge_btn1_in;
  edge_detector_2 edge_btn1 (
    .clk(clk),
    .in(M_edge_btn1_in),
    .out(M_edge_btn1_out)
  );
  wire [1-1:0] M_edge_btn2_out;
  reg [1-1:0] M_edge_btn2_in;
  edge_detector_2 edge_btn2 (
    .clk(clk),
    .in(M_edge_btn2_in),
    .out(M_edge_btn2_out)
  );
  wire [1-1:0] M_edge_btn3_out;
  reg [1-1:0] M_edge_btn3_in;
  edge_detector_2 edge_btn3 (
    .clk(clk),
    .in(M_edge_btn3_in),
    .out(M_edge_btn3_out)
  );
  wire [1-1:0] M_edge_btn4_out;
  reg [1-1:0] M_edge_btn4_in;
  edge_detector_2 edge_btn4 (
    .clk(clk),
    .in(M_edge_btn4_in),
    .out(M_edge_btn4_out)
  );
  wire [1-1:0] M_vc_out;
  wire [16-1:0] M_vc_debug;
  variable_counter_4 vc (
    .clk(clk),
    .rst(rst),
    .out(M_vc_out),
    .debug(M_vc_debug)
  );
  wire [1-1:0] M_slow_timer_value;
  counter_5 slow_timer (
    .clk(clk),
    .rst(rst),
    .value(M_slow_timer_value)
  );
  reg [3:0] M_col1_register_d, M_col1_register_q = 1'h0;
  reg [3:0] M_col2_register_d, M_col2_register_q = 1'h0;
  reg [3:0] M_col3_register_d, M_col3_register_q = 1'h0;
  reg [3:0] M_col4_register_d, M_col4_register_q = 1'h0;
  reg [2:0] M_mini_timer_d, M_mini_timer_q = 1'h0;
  reg [3:0] M_main_timer_d, M_main_timer_q = 1'h0;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_6 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [16-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_dec;
  multi_dec_ctr_7 dec_ctr (
    .clk(clk),
    .rst(rst),
    .dec(M_dec_ctr_dec),
    .digits(M_dec_ctr_digits)
  );
  wire [32-1:0] M_random_num;
  reg [1-1:0] M_random_next;
  reg [32-1:0] M_random_seed;
  pn_gen_8 random (
    .clk(clk),
    .rst(rst),
    .next(M_random_next),
    .seed(M_random_seed),
    .num(M_random_num)
  );
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu16_9 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [4-1:0] M_lookup1_led_Out;
  reg [4-1:0] M_lookup1_randgen;
  look_up_table_10 lookup1 (
    .randgen(M_lookup1_randgen),
    .led_Out(M_lookup1_led_Out)
  );
  
  wire [4-1:0] M_lookup2_led_Out;
  reg [4-1:0] M_lookup2_randgen;
  look_up_table_10 lookup2 (
    .randgen(M_lookup2_randgen),
    .led_Out(M_lookup2_led_Out)
  );
  
  wire [4-1:0] M_lookup3_led_Out;
  reg [4-1:0] M_lookup3_randgen;
  look_up_table_10 lookup3 (
    .randgen(M_lookup3_randgen),
    .led_Out(M_lookup3_led_Out)
  );
  
  wire [4-1:0] M_lookup4_led_Out;
  reg [4-1:0] M_lookup4_randgen;
  look_up_table_10 lookup4 (
    .randgen(M_lookup4_randgen),
    .led_Out(M_lookup4_led_Out)
  );
  
  always @* begin
    M_col2_register_d = M_col2_register_q;
    M_col4_register_d = M_col4_register_q;
    M_mini_timer_d = M_mini_timer_q;
    M_col1_register_d = M_col1_register_q;
    M_col3_register_d = M_col3_register_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    usb_tx = usb_rx;
    io_sel = 1'h0;
    io_seg = 1'h0;
    io_led = 24'h000000;
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_alufn = 1'h0;
    M_random_seed = 128'h843233523a613966423b622562592c62;
    M_edge_detector_slow_timer_in = M_slow_timer_value;
    M_random_next = M_edge_detector_slow_timer_out;
    M_dec_ctr_dec = M_edge_detector_slow_timer_out;
    M_lookup1_randgen = M_random_num[0+3-:4];
    M_lookup2_randgen = M_random_num[4+3-:4];
    M_lookup3_randgen = M_random_num[8+3-:4];
    M_lookup4_randgen = M_random_num[12+3-:4];
    if (M_mini_timer_q == 1'h0) begin
      M_col1_register_d = M_lookup1_led_Out;
      M_col2_register_d = M_lookup2_led_Out;
      M_col3_register_d = M_lookup3_led_Out;
      M_col4_register_d = M_lookup4_led_Out;
      M_mini_timer_d = 3'h5;
    end
    if (M_slow_timer_value == 1'h1) begin
      M_mini_timer_d = M_mini_timer_q - 1'h1;
    end
    io_led[8+6+0-:1] = M_col1_register_q[0+0-:1];
    io_led[8+7+0-:1] = M_col1_register_q[1+0-:1];
    io_led[16+0+0-:1] = M_col1_register_q[2+0-:1];
    io_led[16+1+0-:1] = M_col1_register_q[3+0-:1];
    io_led[0+0+0-:1] = M_col2_register_q[0+0-:1];
    io_led[0+1+0-:1] = M_col2_register_q[1+0-:1];
    io_led[0+2+0-:1] = M_col2_register_q[2+0-:1];
    io_led[0+3+0-:1] = M_col2_register_q[3+0-:1];
    io_led[8+0+0-:1] = M_col3_register_q[0+0-:1];
    io_led[8+1+0-:1] = M_col3_register_q[1+0-:1];
    io_led[8+2+0-:1] = M_col3_register_q[2+0-:1];
    io_led[8+3+0-:1] = M_col3_register_q[3+0-:1];
    io_led[16+4+0-:1] = M_col4_register_q[0+0-:1];
    io_led[16+5+0-:1] = M_col4_register_q[1+0-:1];
    io_led[16+6+0-:1] = M_col4_register_q[2+0-:1];
    io_led[16+7+0-:1] = M_col4_register_q[3+0-:1];
    M_btn_cond1_in = io_dip[0+6+0-:1];
    M_btn_cond2_in = io_dip[0+4+0-:1];
    M_btn_cond3_in = io_dip[0+7+0-:1];
    M_btn_cond4_in = io_dip[8+0+0-:1];
    M_edge_btn1_in = M_btn_cond1_out;
    M_edge_btn2_in = M_btn_cond2_out;
    M_edge_btn3_in = M_btn_cond3_out;
    M_edge_btn4_in = M_btn_cond4_out;
    io_led[0+4+0-:1] = M_edge_btn1_out;
    io_led[0+5+0-:1] = M_edge_btn2_out;
    io_led[0+6+0-:1] = M_edge_btn3_out;
    io_led[0+7+0-:1] = M_edge_btn4_out;
    if (M_edge_btn1_out == 1'h1) begin
      M_alu_a = M_col1_register_q;
      M_alu_b = 1'h1;
      M_alu_alufn = 6'h21;
      M_col1_register_d = M_alu_out[0+3-:4];
    end
    if (M_edge_btn2_out == 1'h1) begin
      M_alu_a = M_col2_register_q;
      M_alu_b = 1'h1;
      M_alu_alufn = 6'h21;
      M_col2_register_d = M_alu_out[0+3-:4];
    end
    if (M_edge_btn3_out == 1'h1) begin
      M_alu_a = M_col3_register_q;
      M_alu_b = 1'h1;
      M_alu_alufn = 6'h21;
      M_col3_register_d = M_alu_out[0+3-:4];
    end
    if (M_edge_btn4_out == 1'h1) begin
      M_alu_a = M_col4_register_q;
      M_alu_b = 1'h1;
      M_alu_alufn = 6'h21;
      M_col4_register_d = M_alu_out[0+3-:4];
    end
    M_seg_values = M_dec_ctr_digits;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_col1_register_q <= 1'h0;
      M_col2_register_q <= 1'h0;
      M_col3_register_q <= 1'h0;
      M_col4_register_q <= 1'h0;
      M_mini_timer_q <= 1'h0;
      M_main_timer_q <= 1'h0;
    end else begin
      M_col1_register_q <= M_col1_register_d;
      M_col2_register_q <= M_col2_register_d;
      M_col3_register_q <= M_col3_register_d;
      M_col4_register_q <= M_col4_register_d;
      M_mini_timer_q <= M_mini_timer_d;
      M_main_timer_q <= M_main_timer_d;
    end
  end
  
endmodule
