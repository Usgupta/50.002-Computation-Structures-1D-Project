/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fsm_auto_9 (
    input clk,
    input rst,
    input start_button,
    input dec,
    input [15:0] rng16,
    output reg [5:0] alufn,
    output reg [2:0] asel,
    output reg [2:0] bsel,
    output reg [1:0] wdsel,
    output reg [3:0] regfile_wa,
    output reg [3:0] regfile_ra,
    output reg [3:0] regfile_rb,
    output reg we_regfile,
    output reg [3:0] main_timer_sel,
    output reg [7:0] main_timer_segs,
    output reg [7:0] mini_timer_segs,
    output reg [15:0] p1_led1,
    output reg [15:0] p1_led2,
    output reg [15:0] p1_led3,
    output reg [15:0] p1_led4,
    output reg [15:0] p2_led1,
    output reg [15:0] p2_led2,
    output reg [15:0] p2_led3,
    output reg [15:0] p2_led4
  );
  
  
  
  wire [1-1:0] M_vc_out;
  wire [16-1:0] M_vc_debug;
  variable_counter_11 vc (
    .clk(clk),
    .rst(rst),
    .out(M_vc_out),
    .debug(M_vc_debug)
  );
  wire [1-1:0] M_slow_timer_value;
  counter_4 slow_timer (
    .clk(clk),
    .rst(rst),
    .value(M_slow_timer_value)
  );
  wire [7-1:0] M_seg_seg;
  wire [2-1:0] M_seg_sel;
  reg [8-1:0] M_seg_values;
  multi_seven_seg_18 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [8-1:0] M_dec_ctr_digits;
  wire [4-1:0] M_dec_ctr_onedigit;
  reg [1-1:0] M_dec_ctr_dec;
  multi_dec_ctr_19 dec_ctr (
    .clk(clk),
    .rst(rst),
    .dec(M_dec_ctr_dec),
    .digits(M_dec_ctr_digits),
    .onedigit(M_dec_ctr_onedigit)
  );
  wire [1-1:0] M_dctr_ovf;
  wire [4-1:0] M_dctr_value;
  reg [1-1:0] M_dctr_dec;
  decimal_counter_5_20 dctr (
    .clk(clk),
    .rst(rst),
    .dec(M_dctr_dec),
    .ovf(M_dctr_ovf),
    .value(M_dctr_value)
  );
  reg [3:0] M_mini_timer_d, M_mini_timer_q = 1'h0;
  reg [15:0] M_p1_col1_d, M_p1_col1_q = 1'h0;
  reg [15:0] M_p1_col2_d, M_p1_col2_q = 1'h0;
  reg [15:0] M_p1_col3_d, M_p1_col3_q = 1'h0;
  reg [15:0] M_p1_col4_d, M_p1_col4_q = 1'h0;
  reg [15:0] M_p2_col1_d, M_p2_col1_q = 1'h0;
  reg [15:0] M_p2_col2_d, M_p2_col2_q = 1'h0;
  reg [15:0] M_p2_col3_d, M_p2_col3_q = 1'h0;
  reg [15:0] M_p2_col4_d, M_p2_col4_q = 1'h0;
  localparam IDLE_1_states = 5'd0;
  localparam START_states = 5'd1;
  localparam START_COUNTDOWN_states = 5'd2;
  localparam SET_MAIN_TIMER_60_states = 5'd3;
  localparam DECREASE_GAMETIMER_states = 5'd4;
  localparam MINITIMER_SET_5_states = 5'd5;
  localparam MINITIMER_SET_2_states = 5'd6;
  localparam DECREASE_MINITIMER_states = 5'd7;
  localparam INCREMENT_P1_SCORE_states = 5'd8;
  localparam INCREMENT_P2_SCORE_states = 5'd9;
  localparam GEN_LED_SEQUENCE_states = 5'd10;
  localparam IDLE_2_states = 5'd11;
  localparam SHR_P1_B1_states = 5'd12;
  localparam SHR_P1_B2_states = 5'd13;
  localparam SHR_P1_B3_states = 5'd14;
  localparam SHR_P1_B4_states = 5'd15;
  localparam SHR_P2_B1_states = 5'd16;
  localparam SHR_P2_B2_states = 5'd17;
  localparam SHR_P2_B3_states = 5'd18;
  localparam SHR_P2_B4_states = 5'd19;
  localparam SET_P1_B1_0_states = 5'd20;
  localparam SET_P1_B2_0_states = 5'd21;
  localparam SET_P1_B3_0_states = 5'd22;
  localparam SET_P1_B4_0_states = 5'd23;
  localparam SET_P2_B1_0_states = 5'd24;
  localparam SET_P2_B2_0_states = 5'd25;
  localparam SET_P2_B3_0_states = 5'd26;
  localparam SET_P2_B4_0_states = 5'd27;
  localparam CHECK_WIN_P1_states = 5'd28;
  localparam LOSE_P1_states = 5'd29;
  localparam CHECK_WIN_P2_states = 5'd30;
  localparam LOSE_P2_states = 5'd31;
  
  reg [4:0] M_states_d, M_states_q = IDLE_1_states;
  
  wire [7-1:0] M_oneseg_segs;
  reg [4-1:0] M_oneseg_char;
  seven_seg_21 oneseg (
    .char(M_oneseg_char),
    .segs(M_oneseg_segs)
  );
  
  wire [4-1:0] M_lookup1_led_Out;
  reg [4-1:0] M_lookup1_randgen;
  look_up_table_22 lookup1 (
    .randgen(M_lookup1_randgen),
    .led_Out(M_lookup1_led_Out)
  );
  
  wire [4-1:0] M_lookup2_led_Out;
  reg [4-1:0] M_lookup2_randgen;
  look_up_table_22 lookup2 (
    .randgen(M_lookup2_randgen),
    .led_Out(M_lookup2_led_Out)
  );
  
  wire [4-1:0] M_lookup3_led_Out;
  reg [4-1:0] M_lookup3_randgen;
  look_up_table_22 lookup3 (
    .randgen(M_lookup3_randgen),
    .led_Out(M_lookup3_led_Out)
  );
  
  wire [4-1:0] M_lookup4_led_Out;
  reg [4-1:0] M_lookup4_randgen;
  look_up_table_22 lookup4 (
    .randgen(M_lookup4_randgen),
    .led_Out(M_lookup4_led_Out)
  );
  
  always @* begin
    M_states_d = M_states_q;
    M_p1_col2_d = M_p1_col2_q;
    M_p1_col3_d = M_p1_col3_q;
    M_p1_col4_d = M_p1_col4_q;
    M_p2_col4_d = M_p2_col4_q;
    M_p2_col3_d = M_p2_col3_q;
    M_p2_col2_d = M_p2_col2_q;
    M_mini_timer_d = M_mini_timer_q;
    M_p2_col1_d = M_p2_col1_q;
    M_p1_col1_d = M_p1_col1_q;
    
    alufn = 1'h0;
    asel = 1'h0;
    bsel = 1'h0;
    wdsel = 1'h0;
    regfile_wa = 11'h457;
    regfile_ra = 1'h0;
    regfile_rb = 1'h0;
    we_regfile = 1'h0;
    M_dec_ctr_dec = dec;
    M_oneseg_char = 4'h0;
    M_seg_values[4+3-:4] = 4'h0;
    M_seg_values[0+3-:4] = 4'h0;
    main_timer_sel = M_seg_sel;
    main_timer_segs = ~M_seg_seg;
    mini_timer_segs = M_seg_seg;
    M_dctr_dec = 1'h0;
    M_lookup1_randgen = 1'h0;
    M_lookup2_randgen = 1'h0;
    M_lookup3_randgen = 1'h0;
    M_lookup4_randgen = 1'h0;
    p1_led1 = M_p1_col1_q;
    p1_led2 = M_p1_col2_q;
    p1_led3 = M_p1_col3_q;
    p1_led4 = M_p1_col4_q;
    p2_led1 = M_p2_col1_q;
    p2_led2 = M_p2_col2_q;
    p2_led3 = M_p2_col3_q;
    p2_led4 = M_p2_col4_q;
    M_mini_timer_d = M_dctr_value;
    M_oneseg_char = M_mini_timer_q;
    mini_timer_segs = M_oneseg_segs;
    
    case (M_states_q)
      IDLE_1_states: begin
        if (start_button) begin
          M_states_d = START_states;
        end
      end
      START_states: begin
        M_mini_timer_d = M_dctr_value;
        M_oneseg_char = M_mini_timer_q;
        mini_timer_segs = M_oneseg_segs;
        M_dctr_dec = dec;
        if (M_mini_timer_q == 1'h0) begin
          M_seg_values = M_dec_ctr_digits;
          main_timer_segs = ~M_seg_seg;
          main_timer_sel = M_seg_sel;
          M_states_d = GEN_LED_SEQUENCE_states;
        end
      end
      GEN_LED_SEQUENCE_states: begin
        M_lookup1_randgen = rng16[0+3-:4];
        M_lookup2_randgen = rng16[4+3-:4];
        M_lookup3_randgen = rng16[8+3-:4];
        M_lookup4_randgen = rng16[12+3-:4];
        M_p1_col1_d[0+3-:4] = M_lookup1_led_Out;
        M_p1_col2_d = M_lookup2_led_Out;
        M_p1_col3_d = M_lookup3_led_Out;
        M_p1_col4_d = M_lookup4_led_Out;
        M_p2_col1_d = M_lookup1_led_Out;
        M_p2_col2_d = M_lookup2_led_Out;
        M_p2_col3_d = M_lookup3_led_Out;
        M_p2_col4_d = M_lookup4_led_Out;
        p1_led1 = M_p1_col1_q;
        p1_led2 = M_p1_col2_q;
        p1_led3 = M_p1_col3_q;
        p1_led4 = M_p1_col4_q;
        p2_led1 = M_p2_col1_q;
        p2_led2 = M_p2_col2_q;
        p2_led3 = M_p2_col3_q;
        p2_led4 = M_p2_col4_q;
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_states_q <= M_states_d;
    
    if (rst == 1'b1) begin
      M_mini_timer_q <= 1'h0;
      M_p1_col1_q <= 1'h0;
      M_p1_col2_q <= 1'h0;
      M_p1_col3_q <= 1'h0;
      M_p1_col4_q <= 1'h0;
      M_p2_col1_q <= 1'h0;
      M_p2_col2_q <= 1'h0;
      M_p2_col3_q <= 1'h0;
      M_p2_col4_q <= 1'h0;
    end else begin
      M_mini_timer_q <= M_mini_timer_d;
      M_p1_col1_q <= M_p1_col1_d;
      M_p1_col2_q <= M_p1_col2_d;
      M_p1_col3_q <= M_p1_col3_d;
      M_p1_col4_q <= M_p1_col4_d;
      M_p2_col1_q <= M_p2_col1_d;
      M_p2_col2_q <= M_p2_col2_d;
      M_p2_col3_q <= M_p2_col3_d;
      M_p2_col4_q <= M_p2_col4_d;
    end
  end
  
endmodule
